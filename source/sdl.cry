import Math;
import NativeTunnel;
import Images;

namespace Sdl {
    function _send_native_message(type, args, cb = null) {

        NativeTunnel.Tunnel.send(type, args.join(','), response => {
            if (cb == null) return;
            responseArgs = response == '' ? [] : response.split(',');
            cb(responseArgs);
        });
    }

    function _await_send_native_message(type, args) {
        waiting = true;
        output = null;
        _send_native_message(type, args, response => {
            waiting = false;
            output = response;
        });

        while (waiting) {
            sleep(0.001);
            NativeTunnel.Tunnel.flushRecvQueue();
        }

        return output;
    }

    function initialize() {
        _await_send_native_message('sdl-init', []);
    }

    function pollEvents() {
        args = _await_send_native_message('sdl-poll-events', []);
        events = [];
        for (i = 0; i < args.length; i += 2) {
            events.add(new SdlEvent(args[i], args[i + 1]));
        }
        return events;
    }

    enum SdlEventType {
        QUIT,
        KEY_UP,
        KEY_DOWN,
    }

    class SdlEvent {
        field type; // QUIT | KEYUP | KEYDOWN
        field key;

        constructor(type, key) {
            switch (type) {
                case 'quit': this.type = SdlEventType.QUIT; break;
                case 'keyup': this.type = SdlEventType.KEY_UP; break;
                case 'keydown': this.type = SdlEventType.KEY_DOWN; break;
            }
            this.key = key;
        }
    }

    class SdlWindow {
        field _handle;
        field _rendererHandle;
        field width;
        field height;
        field title;
        field surface;

        constructor(title, width, height) {
            this.title = title;
            this.width = width;
            this.height = height;
        }

        function show() {
            args = _await_send_native_message('sdl-create-window', [Math.max(100, this.width), Math.max(100, this.height), this.title + '']);
            this._handle = parseInt(args[0]);
            this.surface = SdlSurface._fromArgs(parseInt(args[1]), this.width, this.height);
            this._rendererHandle = parseInt(args[2]);
            return this;
        }

        function present() {
            _send_native_message('sdl-render-present', [this._rendererHandle]);
            return this;
        }
    }

    class SdlSurface {
        field _handle;
        field width;
        field height;

        @private
        constructor(handle, width, height) {
            this._handle = handle;
            this.width = width;
            this.height = height;
        }

        function blit(surfaceOrWindow, x, y) {
            w = this.width;
            h = this.height;
            _send_native_message('sdl-surface-blit', [
                this._handle,
                0, 0, w, h,
                surfaceOrWindow is SdlWindow ? surfaceOrWindow.surface._handle : surfaceOrWindow._handle,
                x, y, w, h,
            ]);
            return this;
        }

        static field _imageDataByPath = {};

        static function _getImageData(path) {
            imageData = SdlSurface._imageDataByPath.get(path);
            if (imageData == null) {
                bmp = Images.Bitmap.fromResource(path);
                imageData = {
                    'b64': bmp.toBase64(ImageFormat.PNG),
                    'width': bmp.width,
                    'height': bmp.height,
                };
                SdlSurface._imageDataByPath[path] = imageData;
            }
            return imageData;
        }

        static function _fromArgs(handle, width, height) {
            return new SdlSurface(handle, width, height);
        }

        static function loadResource(path) {
            imageData = SdlSurface._getImageData(path);
            args = _await_send_native_message('sdl-load-image', [imageData['b64']]);
            surface = new SdlSurface(parseInt(args[0]), imageData['width'], imageData['height']);
            return surface;
        }
    }

    static class SdlDraw {

        static function rect(surfaceOrWindow, x, y, width, height, r, g, b, a = 255) {
            _send_native_message('sdl-draw-rect', [
                surfaceOrWindow is SdlWindow ? surfaceOrWindow._rendererHandle : null,
                x, y,
                width, height, 
                r, g, b, a
            ]);
        }
    }
}
